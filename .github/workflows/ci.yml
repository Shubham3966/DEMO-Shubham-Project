name: Advanced CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package

      - name: Run Tests
        run: mvn test

      - name: Store Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar

  dockerize:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Clean Target Directory (Remove Old Artifacts)
        run: rm -rf target/* || echo "Target directory is already clean."

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/
    
      - name: Verify Downloaded JAR (Debugging Step)
        run: ls -l target/ || echo "No JAR file found in target/!"

      - name: Set JAR File Name
        run: |
          JAR_FILE=$(find target -type f -name "*.jar" | head -n 1)
          if [[ -z "$JAR_FILE" ]]; then
            echo "Error: No JAR file found in target/ directory!"
            exit 1
          fi
          echo "JAR_FILE=$(basename "$JAR_FILE")" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Tag Docker Image
        run: |
          REPO_NAME=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          docker build --build-arg JAR_FILE=${{ env.JAR_FILE }} -t ghcr.io/$REPO_NAME/mcm-project:latest .
          docker tag ghcr.io/$REPO_NAME/mcm-project:latest ghcr.io/$REPO_NAME/mcm-project:${{ github.run_number }}

      - name: Push Docker Image
        run: |
          REPO_NAME=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          docker push ghcr.io/$REPO_NAME/mcm-project:latest
          docker push ghcr.io/$REPO_NAME/mcm-project:${{ github.run_number }}

  deploy:
    needs: dockerize
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install AWS CLI
        run: |
          if ! aws --version; then
            sudo apt-get update
            sudo apt-get install -y unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update
          else
            echo "AWS CLI is already installed"
          fi
          aws --version  # Verify installation

      - name: Install Elastic Beanstalk CLI
        run: |
          pip install awsebcli --upgrade --user

      - name: Deploy to Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          eb init -p docker ${{ secrets.EB_APPLICATION_NAME }} --region $AWS_REGION
          eb deploy ${{ secrets.EB_ENVIRONMENT_NAME }}
